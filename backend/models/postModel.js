import mongoose from 'mongoose';

const postSchema = mongoose.Schema({
    postedBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    text: {
        type: String,
        maxLength: 500
    },
    img: {
        type: String,        
    },
    likes: {
        type: Number,
        default: 0
    },
    replies: [
        {
            userId: {
                type: mongoose.Schema.Types.ObjectId,
                ref: 'User',
                required: true
            },
            text: {
                type: String,
                required: true
            },
            userProfilePic: {
                type: String
            },
            username: {
                type: String
            }
        }
    ]
}, {
    timestamps: true
});

const Post = mongoose.model('Post', postSchema);

export default Post;

/*
NOTES:
mongoose.Schema.Types.ObjectId seems to be a specific mongoose type for object id's (which will be autogenerated)
ref: seems to tell which Model this field is making reference to. In this case, its User

In our postModel, it contains a user field which is set to type ObjetId, and with the ref option, we have told mongoose to use the id from our userModel to fill the user field in postModel during population.

This means all _id we store in the user field of postModel must be document _id from the User Model.
*/